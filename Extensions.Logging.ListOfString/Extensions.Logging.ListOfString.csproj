<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard1.1</TargetFramework>
    <RootNamespace>Extensions.Logging.ListOfString</RootNamespace>
    <AssemblyVersion>4.2.0</AssemblyVersion>
    <AssemblyFileVersion>4.2.0-preview</AssemblyFileVersion>
    <PackageVersion>4.2.0-preview</PackageVersion>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <Title>Extensions.Logging.ListOfString : Test your logging with new StringListLogger().Log(...)</Title>
    <PackageDescription><![CDATA[**Extensions.Logging.ListOfString** logs to a list of string so you can test your logging.

If your components depend on an `ILogger<T>` use `Microsoft.Extensions.Logging.LoggerFactory`
to make one:
```
ILoggerFactory factory=new LoggerFactory.AddProvider(new StringListLoggerProvider())
var logger= factory.CreateLogger<Test1>();

...tests... ;

StringListLogger.Instance
   .LoggedLines
   .ShouldContain(x=>x.Matches("kilroy was here"));
```
or
```
var loggedLines = new List<string>();
var logger= new LoggerFactory().AddStringListLogger(loggedLines).CreateLogger("Test2");

...tests... ;

loggedLines.ShouldContain(x=>x.Matches("kilroy was here too."));

```
Or if a component only depends on an `ILogger`, it's much simpler. You don't need the factory or provider:

```
var uut = new MyComponent( StringListLogger.Instance );
... tests ...
StringListLogger.Instance
   .LoggedLines
   .ShouldContain(x=>x.Matches("kilroy was here"));
```
Or if you are using `Microsoft.Extensions.DependencyInjection` in your test suite then:
```
public StringListLogger Log = new();
...
ServiceCollection.AddLogging(
    lb => lb
             /* .AddConfiguration(Configuration.GetSection("Logging")) */
             .AddProvider(new StringListLoggerProvider(Log))
             /* .AddConsole() */
             );

...tests...

Log.LoggedLines.ShouldContain(x=>x.Matches("kilroy was here"));
```

For tests running in parallel, each one creating a new LoggerFactory and LoggerProvider, don't
rely on the shared StringListLogger.Instance. Follow the above example, passing a known
instance to the LoggerProvider.

This is for Microsoft.Extensions.Logging.Abstractions. For Serilog, see https://www.nuget.org/packages/Serilog.Sinks.ListOfString/

Part of https://www.nuget.org/packages/TestBase . *TestBase* gives you a flying start to unit
testing with fluent assertions that are easy to extend, and tools for testing with dependencies
on AspNetMvc, HttpClient, Ado.Net, Streams and Loggers.
]]></PackageDescription>
    <PackageReleaseNotes>
      ChangeLog
      --------
      4.2.0   Added StringListLoggerProvider.Instance so that parallel running tests using
              LoggerFactory and LoggerProviders can each have their own Instance.
      4.1.3.0 fix: StringListLogger.Instance should always be initialized
      4.1.2.5 Make Scopes public so it's assertable
      4.0.9.0 Removed dependency on net4 version of Mono.Linq.Expressions
      4.0.8.0 Separated Serilog.Sinks.ListOfString and Extensions.Logging.StringListLogger
      4.0.7.0 Added TestBase.FakeHttpClient. Added Should(predicate,...) as synonym of ShouldHave(predicate,...)
      4.0.6.2 TestBase.Mvc can run controller actions on aspnetcore using controller.WithControllerContext()
      4.0.5.2 TestBase.Mvc partially ported to netstandard20 / AspNetCore
      4.0.4.1 StreamShoulds
      4.0.3.0 StringListLogger as MS Logger and as Serilogger
    </PackageReleaseNotes>
    <Copyright>(c) Chris F. Carroll, 2013-2025</Copyright>
    <PackageLicenseExpression>LGPL-2.1-or-later</PackageLicenseExpression>
    <Authors>Chris F Carroll</Authors>
    <Owners>Chris F Carroll</Owners>
    <PackageProjectUrl>https://github.com/chrisfcarroll/TestBase</PackageProjectUrl>
    <RepositoryUrl>https://github.com/chrisfcarroll/TestBase</RepositoryUrl>
    <RequireLicenseAcceptance>false</RequireLicenseAcceptance>
    <IncludeSymbols>true</IncludeSymbols>
    <PackageTags>nunit;test;unittest;tdd;mock;logging;serilog</PackageTags>
  </PropertyGroup>

  <ItemGroup>
    <None Include="README.md" Pack="true" PackagePath="\"/>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="1.1.2" />
  </ItemGroup>
</Project>
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard1.6;net45</TargetFrameworks>
    <AssemblyVersion>4.2.0</AssemblyVersion>
    <AssemblyFileVersion>4.2.0</AssemblyFileVersion>
    <PackageVersion>4.2.0</PackageVersion>
    <Title>TestBase – Rich, fluent assertions and tools for testing with heavyweight dependencies: HttpClient, AdoNet, AspNetCore, AspNet.Mvc, Streams, Logging</Title>
    <PackageDescription><![CDATA[*TestBase* gives you a flying start with 
- fluent assertions that are simple to extend
- sharp error messages
- tools to help you test with “heavyweight” dependencies on 
  - AspNetCore.Mvc, AspNet.Mvc 3-5, or WebApi Contexts
  - HttpClient
  - Ado.Net
  - Streams & Logging
- Mix & match with your favourite test runners & assertions.

# TestBase.HttpClient.Fake

```
//Arrange
var httpClient = new FakeHttpClient()
                .SetupGetUrl("https://host.*/").Returns(request=> "Got:" + request.RequestUri)
                
                .SetupGetPath("/uri[Pp]attern/").Returns("stringcontent")
                
                .SetupPost(".*").Returns(response)

                .SetupPost(".*", new byte[]{1,2,3}).Returns(otherResponse)

                .SetupPost(".*", "a=1&b=2")
                .Returns(
                            request => "You said : " + request.Content.ReadAsStringAsync().ConfigureFalseGetResult(),
                            HttpStatusCode.Accepted)

                .Setup(x=>x.RequestUri.PathAndQuery.StartsWith("/this")).Returns(response)
                
                .Setup(x=>x.Method ==HttpMethod.Put)
                .Returns(new HttpResponseMessage(HttpStatusCode.Accepted));

// Act
var putResponse = await httpClient.PutAsync("http://localhost/thing", new StringContent("{a=1,b=2}"));
var postResponse= await httpClient.PostAsync("http://[::1]/", new StringContent("a=1&b=2"));

//Debug
httpClient.Invocations
            .ForEach(async i =>Console.WriteLine("{0} {1}",i.RequestUri, 
                                                await i.Content.ReadAsStringAsync()));

            
//Assert
putResponse.StatusCode.ShouldBe(HttpStatusCode.Accepted);
postResponse.ShouldBe(response); // ==> SetupPost(".*").Returns(response) was the first 
                                    // matched setup. Setups are tried in first-to-last order.                                            

httpClient.Verify(x=>x.Method ==HttpMethod.Put, "Expected Put, but no matching invocations.");
httpClient.Verify(
                    x=>x.Method ==HttpMethod.Post 
                    && x.Content.ReadAsStringAsync().ConfigureFalseGetResult()=="a=1&b=2",
                    "Expected Post a=1&b=2");

httpClient.VerifyAll(); // ==> "Exception : 4 unmatched expectations"

```

### TestBase

Chainable fluent assertions get you to the point concisely.

```
UnitUnderTest.Action()
  .ShouldNotBeNull()
  .ShouldEqualByValueExceptFor(new {Id=1, Descr=expected}, ignoreList )
  .Payload
  .ShouldMatchIgnoringCase("I expected this")
	.Should(someOtherPredicate);

.ShouldEqualByValue().ShouldEqualByValueExceptFor(...).ShouldEqualByValueOnMembers()
  work with all kinds of object and collections, and report what differed.
string.ShouldMatch(pattern).ShouldNotMatch().ShouldBeEmpty().ShouldNotBeEmpty()
.ShouldNotBeNullOrEmptyOrWhiteSpace().ShouldEqualIgnoringCase()
.ShouldContain().ShouldStartWith().ShouldEndWith().ShouldBeContainedIn().ShouldBeOneOf().ShouldNotBeOneOf()
numeric.ShouldBeBetween().ShouldEqualWithTolerance()....GreaterThan....LessThan...GreaterOrEqualTo ...
ienumerable.ShouldAll().ShouldContain().ShouldNotContain().ShouldBeEmpty().ShouldNotBeEmpty() ...
stream.ShouldHaveSameStreamContentAs().ShouldContain()
value.ShouldBe().ShouldNotBe().ShouldBeOfType().ShouldBeAssignableTo()...
.ShouldAll(predicate), .SingleOrAssertFail()...

```

See also
 - [TestBase](https://www.nuget.org/packages/TestBase)
 - [TestBase.AspNetCore.Mvc](https://www.nuget.org/packages/TestBase.AspNetCore.Mvc)
 - [TestBase-Mvc](https://www.nuget.org/packages/TestBase-Mvc)
 - [TestBase.AdoNet](https://www.nuget.org/packages/TestBase.AdoNet)
 - [Serilog.Sinks.ListOfString](https://www.nuget.org/packages/Serilog.Sinks.Listofstring)
 - [Extensions.Logging.ListOfString](https://www.nuget.org/packages/Extensions.Logging.ListOfString)
]]></PackageDescription>
    <PackageReleaseNotes>
      ChangeLog
      ---------
      4.2.0   TestBase-Mvc works on mono
      4.2.0   TestBase.FakeHttpClient.SetupGet() and SetupPost() overloads
      4.1.4.3 Release for both netstandard and net45
      4.1.4   TestBase.FakeHttpClient stepped down to netstandard 1.2
      4.1.3.1 Corrected Assertion.ToString() to show BoolWithString detail. Added ShouldEqualByValueOnMembers()
      4.0.9   Removed dependency on net4 version of Mono.Linq.Expressions
      4.0.8   Separated Serilog.Sinks.ListOfString and Extensions.Logging.StringListLogger
      4.0.7   Added TestBase.FakeHttpClient. Added Should(predicate,...) as synonym of ShouldHave(predicate,...)
      4.0.6.2 TestBase.Mvc can run controller actions on aspnetcore using controller.WithControllerContext()
      4.0.5.2 TestBase.Mvc partially ported to netstandard20 / AspNetCore
      4.0.4.1 StreamShoulds
      4.0.3   StringListLogger as MS Logger and as Serilogger
      4.0.1   Port to NetCore
      3.0.3   Improves FakeDb setup
      3.0.x   adds and/or corrects missing Shoulds()
      2.0.5   adds some intellisense and FakeDbConnection.Verify(..., message,args) overload
    </PackageReleaseNotes>
    <Copyright>(c) Chris F. Carroll, 2013-2018</Copyright>
    <Authors>Chris F Carroll</Authors>
    <Owners>Chris F Carroll</Owners>
    <PackageProjectUrl>https://github.com/chrisfcarroll/TestBase</PackageProjectUrl>
    <RepositoryUrl>https://github.com/chrisfcarroll/TestBase</RepositoryUrl>
    <RequireLicenseAcceptance>false</RequireLicenseAcceptance>
    <PackageTags>nunit;test;unittest;tdd;fluent assertions;mock;httpclient;system.net;httprequestmessage</PackageTags>
    <IncludeSymbols>true</IncludeSymbols>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <NoWarn>1701;1702;1705;NU1701</NoWarn>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <NoWarn>1701;1702;1705;NU1701</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(TargetFramework)' == 'netstandard1.6'">
    <DefineConstants>NETSTANDARD</DefineConstants>
  </PropertyGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'netstandard1.6' ">
    <PackageReference Include="System.Net.Http" Version="4.3.4" />
    <PackageReference Include="Newtonsoft.Json" Version="9.0.1" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'net45' ">
    <PackageReference Include="Newtonsoft.Json" Version="9.0.1" />
    <Reference Include="System.Net" />
    <Reference Include="System.Net.Http" />
  </ItemGroup>

  <ItemGroup>
    <Reference Include="ExpressionToCodeLib">
      <HintPath>C:\Users\chris\.nuget\packages\expressiontocodelib\2.7.0\lib\netstandard1.6\ExpressionToCodeLib.dll</HintPath>
    </Reference>
  </ItemGroup>

  <PropertyGroup>
    <!-- When compiling .NET SDK 2.0 projects targeting .NET 4.x on Mono using 'dotnet build' you -->
    <!-- have to teach MSBuild where the Mono copy of the reference asssemblies is -->
    <TargetIsMono Condition="$(TargetFramework.StartsWith('net4')) and '$(OS)' == 'Unix'">true</TargetIsMono>

    <!-- Look in the standard install locations -->
    <BaseFrameworkPathOverrideForMono Condition="'$(BaseFrameworkPathOverrideForMono)' == '' AND '$(TargetIsMono)' == 'true' AND EXISTS('/Library/Frameworks/Mono.framework/Versions/Current/lib/mono')">/Library/Frameworks/Mono.framework/Versions/Current/lib/mono</BaseFrameworkPathOverrideForMono>
    <BaseFrameworkPathOverrideForMono Condition="'$(BaseFrameworkPathOverrideForMono)' == '' AND '$(TargetIsMono)' == 'true' AND EXISTS('/usr/lib/mono')">/usr/lib/mono</BaseFrameworkPathOverrideForMono>
    <BaseFrameworkPathOverrideForMono Condition="'$(BaseFrameworkPathOverrideForMono)' == '' AND '$(TargetIsMono)' == 'true' AND EXISTS('/usr/local/lib/mono')">/usr/local/lib/mono</BaseFrameworkPathOverrideForMono>

    <!-- If we found Mono reference assemblies, then use them -->
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net40'">$(BaseFrameworkPathOverrideForMono)/4.0-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net45'">$(BaseFrameworkPathOverrideForMono)/4.5-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net451'">$(BaseFrameworkPathOverrideForMono)/4.5.1-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net452'">$(BaseFrameworkPathOverrideForMono)/4.5.2-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net46'">$(BaseFrameworkPathOverrideForMono)/4.6-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net461'">$(BaseFrameworkPathOverrideForMono)/4.6.1-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net462'">$(BaseFrameworkPathOverrideForMono)/4.6.2-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net47'">$(BaseFrameworkPathOverrideForMono)/4.7-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net471'">$(BaseFrameworkPathOverrideForMono)/4.7.1-api</FrameworkPathOverride>
    <EnableFrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != ''">true</EnableFrameworkPathOverride>

    <!-- Add the Facades directory.  Not sure how else to do this. Necessary at least for .NET 4.5 -->
    <AssemblySearchPaths Condition="'$(BaseFrameworkPathOverrideForMono)' != ''">$(FrameworkPathOverride)/Facades;$(AssemblySearchPaths)</AssemblySearchPaths>
  </PropertyGroup>
  
</Project>
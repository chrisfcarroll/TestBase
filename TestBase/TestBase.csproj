<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>net8.0;net6.0;net5.0;net45;netstandard2.1;netstandard2.0;netstandard1.6</TargetFrameworks>
    <AssemblyVersion>4.4.3</AssemblyVersion>
    <AssemblyFileVersion>4.4.3</AssemblyFileVersion>
    <PackageVersion>4.4.3</PackageVersion>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <Title>TestBase – Rich, fluent assertions and tools for testing with heavyweight dependencies: AspNetCore, AdoNet, HttpClient, AspNet.Mvc, Streams, Logging</Title>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageDescription><![CDATA[*TestBase* gives you a flying start with 
- fluent assertions that are easy to extend
- sharp error messages
- tools to help you test with “heavyweight” dependencies on 
  - AspNetCore.Mvc, AspNet.Mvc or WebApi Contexts
  - HttpClient
  - Ado.Net
  - Streams & Logging
- Mix & match with your favourite test runners & assertions.

```
UnitUnderTest.Action()
  .ShouldNotBeNull()
  .ShouldEqualByValueExceptFor(new {Id=1, Descr=expected}, ignoreList )
  .Payload
    .ShouldMatchIgnoringCase("I expected this")
    .Should(someOtherPredicate);
  .Items
    .ShouldAll(predicate)
    .ShouldContain(item)
    .ShouldNotContain(predicate)
    .Where(predicate)
    .SingleOrAssertFail()

.ShouldEqualByValue().ShouldEqualByValueExceptFor(...).ShouldEqualByValueOnMembers() 
  work with all kinds of object and collections, and report what differed.
string.ShouldMatch(pattern).ShouldNotMatch().ShouldBeEmpty().ShouldNotBeEmpty()
.ShouldNotBeNullOrEmptyOrWhiteSpace().ShouldEqualIgnoringCase()
.ShouldContain().ShouldStartWith().ShouldEndWith().ShouldBeContainedIn(), ...
numeric.ShouldBeBetween().ShouldEqualWithTolerance()....GreaterThan....LessThan...GreaterOrEqualTo ...
ienumerable.ShouldAll().ShouldContain().ShouldNotContain().ShouldBeEmpty().ShouldNotBeEmpty() ...
stream.ShouldHaveSameStreamContentAs().ShouldContain()
value.ShouldBe().ShouldNotBe().ShouldBeOfType().ShouldBeAssignableTo()...
```

Testable Logging is in packages Extensions.Logging.ListOfString and Serilog.Sinks.ListOfString

```
// Extensions.Logging.ListOfString
var log = new List<String>();
ILogger mslogger= new LoggerFactory().AddStringListLogger(log).CreateLogger("Test2");

// Serilog.Sinks.ListOfString
Serilog.Logger slogger= new LoggerConfiguration().WriteTo.StringList(log).CreateLogger();
```
]]></PackageDescription>
    <PackageReleaseNotes>
      ChangeLog
      ---------
      4.4.3&#x2008;&#x2007; TooString version
      4.4.1&#x2008;&#x2007; Added net8.0 target
      4.4.0.1 fix: The 4.4.0 builds for NetFramework 4.x and NetStandard were faulty. | net40 target is dropped (but may be be re-introduced)
      4.4.0&#x2008;&#x2007; Warning: The 4.4.0 builds for NetFramework and NetStandard were faulty.
      4.4.0&#x2008;&#x2007; [return:NotNull] and [NotNull]actual on ShouldNotBeNull(), ShouldNotBeNullOrEmpty(), ShouldNotBeNullOrEmptyOrWhitespace()
      4.3.0&#x2008;&#x2007; Added Assert.That(actual,predicate,comments, [CallerArgumentExpression]actual, [CallerArgumentExpression]predicate)
      &#x2007;&#x2008;&#x2007;&#x2008;&#x2007;&#x2008;&#x2007; Added net5.0 target.
      &#x2007;&#x2008;&#x2007;&#x2008;&#x2007;&#x2008;&#x2007; fix: Comparer.MemberCompare() &amp; IEnumerable&lt;&gt;.ShouldEqualByValue() when left &amp; right are both IEnumerable, and right is longer than left  
      4.2.0&#x2008;&#x2007; TestBase-Mvc works on mono
      4.2.0&#x2008;&#x2007; TestBase.FakeHttpClient.SetupGet() and SetupPost() overloads
      4.1.4.4 fix: Comparer.MemberCompare() when left or right is null or FileSystemInfo
      4.1.4.3 Release for both netstandard and net45
      4.1.4.2 TestBase fix typos. TestBase.AspNetCore.Mvc added Request.SetRequestCookies()
      4.1.4.1 TestBase stepped down to netstandard 1.6
      4.1.4.0 TestBase.FakeHttpClient stepped down to netstandard 1.2
      4.1.3.1 Corrected Assertion.ToString() to show BoolWithString detail. Added ShouldEqualByValueOnMembers()
      4.1.2.7 Added item.ShouldBeOneOf / .ShouldNotBeOneOf
      4.1.2.6 Added String.ShouldContainEachOf()
      4.1.2.5 Make Extensions.Logging.ListOfString Scopes public
      4.1.2.4 TestBase.AdoNet providers VerifyFirst(), VerifyLast(), VerifySingle(). Added ToCodeString() overload
      4.1.2.1 Added TestBase.Pdf.DocumentWithLineOfText
      4.1.2.0 TestBase.Mvc.AspNetCore provides WithControllerContext()
      4.1.1.0 Should(assertion) and ShouldHave(assertion) as well as Should(predicate)
      4.1.0.0 [ExpressionToCodeLib](https://www.nuget.org/packages/ExpressionToCodeLib/) and [FastExpressionCompiler](https://www.nuget.org/packages/FastExpressionCompiler/) ftw. Awesomer, and faster, assertions.
      4.0.9.2  ShouldNotMatch(pattern)
      4.0.9.1  ShouldNotContain( item or predicate)
      4.0.9.0  Removed dependency on net4 version of Mono.Linq.Expressions
      4.0.8.0  Separated Serilog.Sinks.ListOfString and Extensions.Logging.StringListLogger
      4.0.7.0  Added TestBase.FakeHttpClient. Added Should(predicate,...) as synonym of ShouldHave(predicate,...)
      4.0.6.2  TestBase.Mvc can run controller actions on aspnetcore using controller.WithControllerContext()
      4.0.5.2  TestBase.Mvc partially ported to netstandard20 / AspNetCore
      4.0.4.1  StreamShoulds
      4.0.3.0  StringListLogger as MS Logger and as Serilogger
      4.0.1.0  Port to NetCore
      3.0.3.0  Improves FakeDb setup
      3.0.x.0  adds and/or corrects missing Shoulds()
      2.0.5.0  adds some intellisense and FakeDbConnection.Verify(..., message,args) overload
    </PackageReleaseNotes>
    <Copyright>(c) Chris F. Carroll, 2013-2025</Copyright>
    <PackageLicenseExpression>LGPL-2.1-or-later</PackageLicenseExpression>
    <Authors>Chris F Carroll</Authors>
    <Owners>Chris F Carroll</Owners>
    <PackageProjectUrl>https://github.com/chrisfcarroll/TestBase</PackageProjectUrl>
    <RepositoryUrl>https://github.com/chrisfcarroll/TestBase</RepositoryUrl>
    <RequireLicenseAcceptance>false</RequireLicenseAcceptance>
    <IncludeSymbols>true</IncludeSymbols>
    <PackageTags>nunit;test;unittest;tdd;fluent assertions;mock;ado.net;mvc;aspnetmvc;aspnetcore;aspnetcoremvc</PackageTags>
  </PropertyGroup>

  <ItemGroup>
    <None Include="README.md" Pack="true" PackagePath="\"/>
  </ItemGroup>

  <PropertyGroup>
    <NoWarn>1591;1701;1702;1705;NU1701</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(TargetFramework)' == 'netstandard1.6'">
    <DefineConstants>NETSTANDARD</DefineConstants>
  </PropertyGroup>

  <ItemGroup Condition=" $([System.Text.RegularExpressions.Regex]::IsMatch( '$(TargetFramework)', '(net40|net45|netstandard1.6|netstandard2.0|netstandard2.1)' )) ">
    <PackageReference Include="System.ValueTuple" Version="4.5.0"/>
    <PackageReference Include="ExpressionToCodeLib" Version="2.7.0" />
    <PackageReference Include="FastExpressionCompiler" Version="2.0.0" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="System.ComponentModel.Annotations" Version="4.4.1" />
  </ItemGroup>
  
  <ItemGroup Condition=" '$(TargetFramework)' == 'net5.0' ">
    <PackageReference Include="ExpressionToCodeLib" Version="2.7.0" />
    <PackageReference Include="FastExpressionCompiler" Version="2.0.0" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <Reference Include="System.ComponentModel.DataAnnotations" />
  </ItemGroup>

  <ItemGroup Condition=" $([System.Text.RegularExpressions.Regex]::IsMatch( '$(TargetFramework)', 'net[6789].0' )) ">
    <ProjectReference Include="..\TooString\TooString.csproj" />
    <PackageReference Include="ExpressionToCodeLib" Version="2.7.0" />
    <PackageReference Include="FastExpressionCompiler" Version="2.0.0" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <Reference Include="System.ComponentModel.DataAnnotations" />
  </ItemGroup>

  <PropertyGroup>
    <!-- When compiling .NET SDK 2.0 projects targeting .NET 4.x on Mono using 'dotnet build' you -->
    <!-- have to teach MSBuild where the Mono copy of the reference asssemblies is -->
    <TargetIsMono Condition="$(TargetFramework.StartsWith('net4')) and '$(OS)' == 'Unix'">true</TargetIsMono>

    <!-- Look in the standard install locations -->
    <BaseFrameworkPathOverrideForMono Condition="'$(BaseFrameworkPathOverrideForMono)' == '' AND '$(TargetIsMono)' == 'true' AND EXISTS('/Library/Frameworks/Mono.framework/Versions/Current/lib/mono')">/Library/Frameworks/Mono.framework/Versions/Current/lib/mono</BaseFrameworkPathOverrideForMono>
    <BaseFrameworkPathOverrideForMono Condition="'$(BaseFrameworkPathOverrideForMono)' == '' AND '$(TargetIsMono)' == 'true' AND EXISTS('/usr/lib/mono')">/usr/lib/mono</BaseFrameworkPathOverrideForMono>
    <BaseFrameworkPathOverrideForMono Condition="'$(BaseFrameworkPathOverrideForMono)' == '' AND '$(TargetIsMono)' == 'true' AND EXISTS('/usr/local/lib/mono')">/usr/local/lib/mono</BaseFrameworkPathOverrideForMono>

    <!-- If we found Mono reference assemblies, then use them -->
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net45'">$(BaseFrameworkPathOverrideForMono)/4.5-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net451'">$(BaseFrameworkPathOverrideForMono)/4.5.1-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net452'">$(BaseFrameworkPathOverrideForMono)/4.5.2-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net46'">$(BaseFrameworkPathOverrideForMono)/4.6-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net461'">$(BaseFrameworkPathOverrideForMono)/4.6.1-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net462'">$(BaseFrameworkPathOverrideForMono)/4.6.2-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net47'">$(BaseFrameworkPathOverrideForMono)/4.7-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net471'">$(BaseFrameworkPathOverrideForMono)/4.7.1-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net472'">$(BaseFrameworkPathOverrideForMono)/4.7.2-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net48'">$(BaseFrameworkPathOverrideForMono)/4.8-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net481'">$(BaseFrameworkPathOverrideForMono)/4.8.1-api</FrameworkPathOverride>
    <EnableFrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != ''">true</EnableFrameworkPathOverride>

    <!-- Add the Facades directory.  Not sure how else to do this. Necessary at least for .NET 4.5 -->
    <AssemblySearchPaths Condition="'$(BaseFrameworkPathOverrideForMono)' != ''">$(FrameworkPathOverride)/Facades;$(AssemblySearchPaths)</AssemblySearchPaths>
  </PropertyGroup>

</Project>
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>netstandard1.6;net40</TargetFrameworks>
    <AssemblyVersion>4.1.4.2</AssemblyVersion>
    <AssemblyFileVersion>4.1.4.2</AssemblyFileVersion>
    <PackageVersion>4.1.4.2</PackageVersion>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <Title>TestBase – Rich, fluent assertions and tools for testing with heavyweight dependencies: AspNetCore, AdoNet, HttpClient, AspNet.Mvc, Streams, Logging</Title>
    <PackageDescription><![CDATA[*TestBase* gives you a flying start with 
- fluent assertions that are easy to extend
- sharp error messages
- tools to help you test with “heavyweight” dependencies on 
  - AspNetCore.Mvc, AspNet.Mvc or WebApi Contexts
  - HttpClient
  - Ado.Net
  - Streams & Logging
- Mix & match with your favourite test runners & assertions.

```
UnitUnderTest.Action()
  .ShouldNotBeNull()
  .ShouldEqualByValueExceptFor(new {Id=1, Descr=expected}, ignoreList )
  .Payload
    .ShouldMatchIgnoringCase("I expected this")
    .Should(someOtherPredicate);
  .Items
    .ShouldAll(predicate)
    .ShouldContain(item)
    .ShouldNotContain(predicate)
    .Where(predicate)
    .SingleOrAssertFail()

.ShouldEqualByValue().ShouldEqualByValueExceptFor(...).ShouldEqualByValueOnMembers() 
  work with all kinds of object and collections, and report what differed.
string.ShouldMatch(pattern).ShouldNotMatch().ShouldBeEmpty().ShouldNotBeEmpty()
.ShouldNotBeNullOrEmptyOrWhiteSpace().ShouldEqualIgnoringCase()
.ShouldContain().ShouldStartWith().ShouldEndWith().ShouldBeContainedIn(), ...
numeric.ShouldBeBetween().ShouldEqualWithTolerance()....GreaterThan....LessThan...GreaterOrEqualTo ...
ienumerable.ShouldAll().ShouldContain().ShouldNotContain().ShouldBeEmpty().ShouldNotBeEmpty() ...
stream.ShouldHaveSameStreamContentAs().ShouldContain()
value.ShouldBe().ShouldNotBe().ShouldBeOfType().ShouldBeAssignableTo()...
```

TestBase.HttpClient.Fake

```
new FakeHttpClient()
      .Setup(x=>x.RequestUri.PathAndQuery.StartsWith("/this"))
        .Returns(response)
      .Setup(x=>x.Method==HttpMethod.Put)
        .Returns(new HttpResponseMessage(HttpStatusCode.Accepted));
```

TestBase.AdoNet
------------------
`FakeDbConnection` 

```
- db.SetupForQuery(…)
- db.SetupForExecuteNonQuery(…)
- db.ShouldHaveUpdated("tableName", …)
- db.ShouldHaveSelected("tableName", …)
- db.ShouldHaveDeleted("tableName", …)
- db.Verify( x=>x.CommandText.Matches("Insert [case] .*") 
             && x.Parameters["id"].Value==1 )
- db
    .ShouldHaveInvoked(cmd => predicate(cmd))
    .ShouldHaveParameter("name", value)
```

`RecordingDbConnection`

TestBase.Mvc.AspNetCore & TestBase.Mvc for Mvc 4 & Mvc 5
--------------------------------------------------------

```
ControllerUnderTest.WithControllerContext()
  .Action()
  .ShouldbeViewResult()
  .ShouldHaveModel<TModel>()
  .ShouldEqualByValue(expected)
ControllerUnderTest.Action()
  .ShouldBeRedirectToRouteResult()
  .ShouldHaveRouteValue("expectedKey", [Optional] "expectedValue");

ShouldHaveViewDataContaining(), ShouldBeJsonResult() etc.
```


- Test AspNetCore controllers with zero setup using 
  `controllerUnderTest.WithControllerContext(actionUnderTest)`
- Test more complex AspNetCore controller/application dependencies using 
  `HostedMvcTestFixtureBase` and specify your MVCApplications `Startup` class.

```
[TestCase("/dummy")]
public async Task Put_Should_ReturnA(string url)
{
    var httpClient=GivenClientForRunningServer<Startup>();
    GivenRequestHeaders(httpClient, "CustomHeader", "HeaderValue1");

    var result = await httpClient.PutAsync(url, json);

    result.ShouldBe_202Accepted();
}
```

For Mvc4 and Mvc 5, fake your http request &amp; context, and use the `RegisterRoutes` method 
of your actual application to set up `Controller.Url`

```
ControllerUnderTest
  .WithHttpContextAndRoutes(
    RouteConfig.RegisterRoutes, 
    "/incomingurl"
  );

ApiControllerUnderTest.WithWebApiHttpContext<T>(
    httpMethod, 
    requestUri,
    routeTemplate)
```

Testable Logging

```
// Extensions.Logging.ListOfString
var log = new List<String>();
ILogger mslogger= new LoggerFactory().AddStringListLogger(log).CreateLogger("Test2");

// Serilog.Sinks.ListOfString
Serilog.Logger slogger= new LoggerConfiguration().WriteTo.StringList(log).CreateLogger();
```]]></PackageDescription>
    <PackageReleaseNotes>ChangeLog
---------
4.1.4.2 TestBase fix typos. TestBase.AspNetCore.Mvc added Request.SetRequestCookies()
4.1.4.1 TestBase stepped down to netstandard 1.6
4.1.4.0 TestBase.FakeHttpClient stepped down to netstandard 1.2
4.1.3.1 Corrected Assertion.ToString() to show BoolWithString detail. Added ShouldEqualByValueOnMembers()
4.1.2.7 Added item.ShouldBeOneOf / .ShouldNotBeOneOf
4.1.2.6 Added String.ShouldContainEachOf()
4.1.2.5 Make Extensions.Logging.ListOfString Scopes public       
4.1.2.4 TestBase.AdoNet providers VerifyFirst(), VerifyLast(), VerifySingle(). Added ToCodeString() overload
4.1.2.1 Added TestBase.Pdf.DocumentWithLineOfText
4.1.2.0 TestBase.Mvc.AspNetCore provides WithControllerContext()
4.1.1.0 Should(assertion) and ShouldHave(assertion) as well as Should(predicate)
4.1.0.0 [ExpressionToCodeLib](https://www.nuget.org/packages/ExpressionToCodeLib/) and [FastExpressionCompiler](https://www.nuget.org/packages/FastExpressionCompiler/) ftw. Awesomer, and faster, assertions.
4.0.9.2  ShouldNotMatch(pattern)
4.0.9.1  ShouldNotContain( item or predicate)
4.0.9.0  Removed dependency on net4 version of Mono.Linq.Expressions
4.0.8.0  Separated Serilog.Sinks.ListOfString and Extensions.Logging.StringListLogger
4.0.7.0  Added TestBase.FakeHttpClient. Added Should(predicate,...) as synonym of ShouldHave(predicate,...)
4.0.6.2  TestBase.Mvc can run controller actions on aspnetcore using controller.WithControllerContext()
4.0.5.2  TestBase.Mvc partially ported to netstandard20 / AspNetCore
4.0.4.1  StreamShoulds
4.0.3.0  StringListLogger as MS Logger and as Serilogger
4.0.1.0  Port to NetCore
3.0.3.0  Improves FakeDb setup
3.0.x.0  adds and/or corrects missing Shoulds()
2.0.5.0  adds some intellisense and FakeDbConnection.Verify(..., message,args) overload
</PackageReleaseNotes>
    <Copyright>(c) Chris F. Carroll, 2013-2018</Copyright>
    <Authors>Chris F Carroll</Authors>
    <Owners>Chris F Carroll</Owners>
    <PackageProjectUrl>https://github.com/chrisfcarroll/TestBase</PackageProjectUrl>
    <RepositoryUrl>https://github.com/chrisfcarroll/TestBase</RepositoryUrl>
    <RequireLicenseAcceptance>false</RequireLicenseAcceptance>
    <IncludeSymbols>true</IncludeSymbols>
    <PackageTags>nunit;test;unittest;tdd;fluent assertions;mock;ado.net;mvc;aspnetmvc;aspnetcore;aspnetcoremvc</PackageTags>
  </PropertyGroup>
  
  <ItemGroup>
    <Compile Remove="TestLogger.cs" />
    <Compile Remove="WindsorExtensions.cs" />
    <Compile Remove="GivenMockEventStore.cs" />
  </ItemGroup>
  
  <PropertyGroup>
    <NoWarn>1591;1701;1702;1705;NU1701</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(TargetFramework)' == 'netstandard1.6'">
    <DefineConstants>NETSTANDARD</DefineConstants>
  </PropertyGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'netstandard1.6' ">
    <PackageReference Include="ExpressionToCodeLib" Version="2.7.0" />
    <PackageReference Include="FastExpressionCompiler" Version="1.7.1" />
    <PackageReference Include="Newtonsoft.Json" Version="9.0.1" />
    <PackageReference Include="System.ComponentModel.Annotations" Version="4.4.1" />
  </ItemGroup>
  <ItemGroup Condition=" '$(TargetFramework)' == 'net40' ">
    <PackageReference Include="Newtonsoft.Json" Version="7.0.1" />
    <PackageReference Include="ExpressionToCodeLib" Version="2.7.0" />
    <Reference Include="System.ComponentModel.DataAnnotations" />
  </ItemGroup>

</Project>
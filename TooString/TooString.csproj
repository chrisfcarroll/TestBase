<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFrameworks>net8.0;net6.0</TargetFrameworks>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
        <LangVersion>latest</LangVersion>
    </PropertyGroup>
    
    <PropertyGroup>
        <AssemblyVersion>0.4</AssemblyVersion>
        <AssemblyFileVersion>0.4</AssemblyFileVersion>
        <PackageVersion>0.4-preview</PackageVersion>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <Title>TooString — The ToString() method for DebugView, Json, and CallerArgumentExpression, going places that serializers don't.</Title>
        <PackageDescription><![CDATA[TooString() can
- make a best effort to stringify unserializable objects.
- Output as Json, or C# Code, or ‘debug’ output

TooString offers 3 extension method groups on Object:
```csharp
value.TooString();
value.ToJson();
value.ToDebugViewString();
```

TooString is not a serializer because it is not fail-fast. Instead, given something it can't
serialize, it will return a best-effort string, rather than throw an exception.

It is intended for test, diagnostic and monitoring output.

Example:
```
( Math.Sqrt(4 * Math.PI / 3)  ).TooString( TooStringHow.CallerArgument )
// Output is the literal code: "Math.Sqrt(4 * Math.PI / 3)"

new { A = "boo", B = new Complex(3,4) }.ToJson();
// Output is the System.Text.Json output:
// {"A":"boo","B":{"Real":3,"Imaginary":4,"Magnitude":5,"Phase":0.9272952180016122}}

var tuple = (one: 1, two: "2", three: new Complex(3,4));
tuple.ToJson()
// Output is not the System.Text.Json output, which would be empty "{}"
// Output is [1,"2",[3,4]]

new { A = "boo", B = new Complex(3,4) }.ToDebugViewString();
// Output is "{ A = boo, B = (3, 4) }" on Net6
// Output is "{ A = boo, B = <3; 4> }" on Net8+
```
]]></PackageDescription>
        <PackageReleaseNotes>
            ChangeLog
            ---------
            0.4.0  ReflectionOptions.MaxLength default = 9 | ReflectionOptions.ForJson and ReflectionOptions.ForDebugView instead of Default | More overloads.
            0.3.0  ReflectionOptions.MaxLength limits display of enumerable elements
            0.2.0  Added Net8 (NB Net8 Json and Numerics output is different from Net6)
                   Rename TooStringStyle to TooStringHow.
                   Fix SerializationStyle.Reflection output of DateTime, DateOnly, TimeOnly.
            0.1.0  Can use DebugView, Json, ToString() or [CallerArgumentExpression] and can output Json or Debug strings.
        </PackageReleaseNotes>
        <Copyright>(c) Chris F. Carroll, 2024-2025</Copyright>
        <PackageLicenseExpression>LGPL-2.1-or-later</PackageLicenseExpression>
        <Authors>Chris F Carroll</Authors>
        <Owners>Chris F Carroll</Owners>
        <PackageProjectUrl>https://github.com/chrisfcarroll/TestBase</PackageProjectUrl>
        <RepositoryUrl>https://github.com/chrisfcarroll/TestBase</RepositoryUrl>
        <RequireLicenseAcceptance>false</RequireLicenseAcceptance>
        <IncludeSymbols>true</IncludeSymbols>
        <PackageTags>test;unittest;tdd;fluent assertions;stringify;tostring;debug;reflection;CallerArgumentExpression</PackageTags>
        <PackageReadmeFile>README.md</PackageReadmeFile>
    </PropertyGroup>
    
    <ItemGroup>
      <None Include="README.md" Pack="true" PackagePath="\" />
    </ItemGroup>

</Project>

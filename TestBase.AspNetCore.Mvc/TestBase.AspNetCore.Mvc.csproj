<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <RootNamespace>TestBase</RootNamespace>
    <AssemblyVersion>4.1.2.4</AssemblyVersion>
    <AssemblyFileVersion>4.1.2.4</AssemblyFileVersion>
    <PackageVersion>4.1.2.4</PackageVersion>
    <Title>TestBase – Rich, fluent assertions and tools for testing with heavyweight dependencies: AspNetCore, AdoNet, HttpClient, AspNet.Mvc, Streams, Logging</Title>
    <PackageDescription><![CDATA[*TestBase* gives you a flying start with 
- fluent assertions that are easy to extend
- sharp error messages
- tools to help you test with “heavyweight” dependencies on 
    - AspNetCore.Mvc, AspNet.Mvc or WebApi Contexts
	- HttpClient
	- Ado.Net
	- Streams & Logging

Chainable fluent assertions get you to the point concisely:
```
ControllerUnderTest.Action()
  .ShouldbeViewResult()
  .ShouldHaveModel<TModel>()
    .ShouldEqualByValue(expected, exceptForTheseFields);
    .Reference
      .ShouldMatchIgnoringCase("I expected this");
  
ControllerUnderTest.Action()
  .ShouldBeRedirectToRouteResult()
  .ShouldHaveRouteValue(""expectedKey"", [Optional] ""expectedValue"");

ShouldHaveViewDataContaining(), ShouldBeJsonResult() etc.
```

Quickly test AspNetCore controllers with zero setup using `controllerUnderTest.WithControllerContext()` :

```
[TestFixture]
public class WhenTestingControllersUsingFakeControllerContext
{
   [Test]
    public void ControllerUrlAndOtherPropertiesShouldWorkAsExpected__GivenControllerContext()
    {
        var uut = new FakeController().WithControllerContext();
        uut.Url.Action(""a"", ""b"").ShouldEqual(""/b/a"");
        uut.ControllerContext.ShouldNotBeNull();
        uut.HttpContext.ShouldBe(uut.ControllerContext.HttpContext);
        uut.Request.ShouldNotBeNull();
        uut.ViewData.ShouldNotBeNull();
        uut.TempData.ShouldNotBeNull();
        uut.MyAction(param)
            .ShouldBeViewResult()
            .ShouldHaveModel<YouSaidViewModel>()
            .YouSaid.ShouldBe(param);
    }

    [Test]
    public void ShouldBeAbleToUseServicesConfiguredInStartupInTests()
    {
      var moreServicesFromDI=TestServerBuilder.RunningServerUsingStartup<TStartup>().Host.ServiceProvider;

      var controllerUnderTest = 
            new AController()
                .WithControllerContext(virtualPathTemplate:""/{Action}/Before/{Controller}"");

        var result= controllerUnderTest
                .Action(""SomeController"",""SomeAction"")
                .ShouldBeViewWithModel<AClass>(""ViewName"");
                    .FooterLink
                    .ShouldBe(""/SomeAction/Before/SomeController"");
    }
}
```

... Or test against complex application dependencies using `HostedMvcTestFixtureBase` and specify your `Startup` class:

```
[TestFixture]
public class WhenTestingControllersUsingAspNetCoreTestTestServer : HostedMvcTestFixtureBase
{

    [TestCase(""/dummy/action?id={id}"")]
    public async Task Get_Should_ReturnActionResult(string url)
    {
        var id=Guid.NewGuid();
        var httpClient=GivenClientForRunningServer<Startup>();
        GivenRequestHeaders(httpClient, ""CustomHeader"", ""HeaderValue1"");
            
        var result= await httpClient.GetAsync(url.Formatz(new {id}));

        result
            .ShouldBe_200Ok()
            .Content.ReadAsStringAsync().Result
            .ShouldBe(""Content"");
    }

    [TestCase(""/dummy"")]
    public async Task Put_Should_ReturnA(string url)
    {
        var something= new Fixture().Create<Something>();
        var jsonBody= new StringContent(something.ToJSon(), Encoding.UTF8, ""application/json"");
        var httpClient=GivenClientForRunningServer<Startup>();
        GivenRequestHeaders(httpClient, ""CustomHeader"", ""HeaderValue1"");

        var result = await httpClient.PutAsync(url, jsonBody);

        result.ShouldBe_202Accepted();
        DummyController.Putted.ShouldEqualByValue( something );
    }
}
```

See also
 - TestBase
 - TestBase.Mvc for Mvc4 and Mvc 5
 - TestBase.HttpClient.Fake
 - TestBase.AdoNet
 - Serilog.Sinks.ListOfString 
 - Extensions.Logging.ListOfString]]></PackageDescription>
    <PackageReleaseNotes>ChangeLog
---------
4.1.2.3 TestBase.Mvc.AspNetCore renamed to TestBase.AspNetCore.Mvc
4.1.2.0 TestBase.Mvc.AspNetCore provides WithControllerContext() and TestServerBuilder
4.0.7.0 Added TestBase.FakeHttpClient. Added Should(predicate,...) as synonym of ShouldHave(predicate,...)
4.0.6.2 TestBase.Mvc can run controller actions on aspnetcore using controller.WithControllerContext()
4.0.5.2 TestBase.Mvc partially ported to netstandard20 / AspNetCore
4.0.4.1 StreamShoulds
4.0.3.0 StringListLogger as MS Logger and as Serilogger
4.0.1.0 Port to NetCore
3.0.3.0 Improves FakeDb setup
3.0.x.0 adds and/or corrects missing Shoulds()
2.0.5.0 adds some intellisense and FakeDbConnection.Verify(..., message,args) overload
</PackageReleaseNotes>
    <Copyright>(c) Chris F. Carroll, 2013-2018</Copyright>
    <Authors>Chris F Carroll</Authors>
    <Owners>Chris F Carroll</Owners>
    <PackageProjectUrl>https://github.com/chrisfcarroll/TestBase</PackageProjectUrl>
    <RepositoryUrl>https://github.com/chrisfcarroll/TestBase</RepositoryUrl>
    <RequireLicenseAcceptance>false</RequireLicenseAcceptance>
    <IncludeSymbols>true</IncludeSymbols>
    <PackageTags>nunit;test;unittest;tdd;fluent assertions;mock;mvc;aspnetmvc;aspnetcore;aspnetcoremvc</PackageTags>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants>TRACE;DEBUG;NETSTANDARD2_0;ASPNETCORE</DefineConstants>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore" Version="2.0.1" />
    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
    <PackageReference Include="Microsoft.AspNetCore.TestHost" Version="2.0.1" />
    <PackageReference Include="Moq" Version="4.8.2" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\TestBase\TestBase.csproj" />
  </ItemGroup>
</Project>